<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright University of Cambridge. All rights reserved -->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/halo" 
		 xmlns:ns="library://ns.adobe.com/flex/mx" horizontalAlign="left" verticalAlign="top">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:SolidColorStroke id="stroke" color="0" weight="1" alpha="1"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[

			private const originalTicked:String = 'yes [✓]'; 
			private const originalUnticked:String = 'no [ ]'; 
			
			[Bindable]
			public function get label():String
			{
				return text.text;
			}
			
			public function set label(value:String):void
			{
				text.text = value;
			}
									
			[Bindable]
			public function get original():Boolean
			{
				return before.label==originalTicked;
			}	
			public function set original(b:Boolean):void
			{
				before.label = b ? originalTicked : originalUnticked;
				invalidateProperties();
			}

			
			public function get selected():Boolean
			{
				return checkBox.selected;
			}
			public function set selected(b:Boolean):void
			{
				checkBox.selected = b;
				invalidateProperties();
			}
						
			public function reset():void
			{
				checkBox.selected = original;
				invalidateProperties();
			}
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				before.enabled = original != checkBox.selected;
			}
			
			private var _checkboxListener:Function = null;
			
			override public function addEventListener(type:String, listener:Function, useCapture:Boolean=false, priority:int=0, useWeakReference:Boolean=false):void
			{
				if(type == Event.CHANGE) {
					super.addEventListener(type, listener, useCapture, priority, useWeakReference);
					checkBox.addEventListener(type, _checkboxListener = function(event:Event):void {
						before.enabled = checkBox.selected != original;
						dispatchEvent(new Event(Event.CHANGE));
					}, useCapture, priority, useWeakReference);
				}
				else if(type == MouseEvent.CLICK)
					before.addEventListener(type, listener, useCapture, priority, useWeakReference);
			}
			
			override public function removeEventListener(type:String, listener:Function, useCapture:Boolean=false):void
			{
				if(type == Event.CHANGE) {
					if(_checkboxListener != null) {
						checkBox.removeEventListener(type, _checkboxListener);
						_checkboxListener = null;
					}
					super.removeEventListener(type, listener);
				}
				else if(type == MouseEvent.CLICK)
					before.removeEventListener(type, listener);
			}


		]]>
	</fx:Script>
	
	<s:VGroup width="100%" gap="2">
		<s:Label id="text" />
		<s:HGroup width="100%" verticalAlign="middle">

			<s:Button id="before" label="{originalUnticked}" width="60"/>
			
			<s:Label text="→" fontSize="14"/>
						
			<s:CheckBox id="checkBox" selected="{original}" />

		</s:HGroup>
	</s:VGroup>

</s:VGroup>
